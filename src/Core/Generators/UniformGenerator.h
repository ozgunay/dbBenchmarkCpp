// UniformGenerator.h

#ifndef _DBBENCHMARK_UNIFORMGENERATOR_H_
#define _DBBENCHMARK_UNIFORMGENERATOR_H_

#include "Generator.h"

#include <atomic>
#include <mutex>
#include <random>

namespace dbbenchmark {
namespace generators {
/**
*   \brief An expression that generates a random value in the specified range.
*   \details 
*   \author Ozgun AY
*   \version 1.0
*   \date 21/11/2018
*   \bug None so far
*/
class UniformGenerator : public Generator<uint64_t> {
public:
  /**
  * Creates a generator that will return strings from the specified set uniformly randomly.
  */
  UniformGenerator(uint64_t min, uint64_t max) : dist_(min, max) { Next(); }
  /**
  * Generate the next string in the distribution.
  */
  uint64_t Next();
  /**
 * Return the previous string generated by the distribution; e.g., returned from the last nextString() call.
 * Calling lastString() should not advance the distribution or have any side effects. If nextString() has not yet
 * been called, lastString() should return something reasonable.
 */
  uint64_t Last();
  
private:
  std::mt19937_64 generator_;
  std::uniform_int_distribution<uint64_t> dist_;
  uint64_t last_int_;
  std::mutex mutex_;
};

inline uint64_t UniformGenerator::Next() {
  std::lock_guard<std::mutex> lock(mutex_);
  return last_int_ = dist_(generator_);
}

inline uint64_t UniformGenerator::Last() {
  std::lock_guard<std::mutex> lock(mutex_);
  return last_int_;
}

} // namespace generators
} // namespace dbbenchmark

#endif // _DBBENCHMARK_UNIFORMGENERATOR_H_